[tool.poetry]
name = "pantry-chef"
version = "0.1.0"
description = ""
authors = ["Allan Aranzaso"]
package-mode = false

[tool.poetry.dependencies]
python = "^3.12.3"
fastapi = "^0.115.0"
uvicorn = "^0.30.6"
ruff = "^0.6.8"
pydantic = "^2.9.2"
databases = {extras = ["postgresql"], version = "^0.9.0"}
sqlalchemy = "^2.0.35"
asyncpg = "^0.29.0"
pydantic-settings = "^2.5.2"

[tool.ruff]
exclude = ["alembic"]
line-length = 90
indent-width = 4
show-fixes = true

[tool.ruff.format]
line-ending = "lf"
quote-style = "single"
indent-style = "space"
skip-magic-trailing-comma = false

[tool.ruff.lint]
extend-select = [
    # PEP-8 and Flake8
    "A", # builtins
    "ANN", # annotations
    "ARG", # unused arguments
    "ASYNC", # flake8-async
    "BLE", # blind-except
    "C4", # comprehensions
    "DTZ", # datetime timezone
    "FBT", # boolean-trap
    "G", # flake8-logging-format
    "I", # isort
    "INP", # implicit-namespace-package
    "ISC", # implicit-str-concat
    "N", # naming
    "PIE", # flake8-pie
    "PT", # flake8-pytest
    "PTH", # flake8-pathlib
    "PYI", # flake-8pyi
    "RET", # flake8-return
    "RSE", # flake8-raise
    "RUF", # ruff
    "S", # bandit
    "SIM", # flake8-simplify
    "SLF", # flake8-self
    "T10", # debugger
    "T20", # prints
    "TCH", # flake8-type-checking
    "TID", # tidy imports

    # Bugs and errors
    "B", # bugbear
    "E", # pycodestyle errors
    "F", # pyflakes
    "PL", # pylint

    # Other
    "C90", # mccabe complexity
    "ERA", # commented out code
    "UP", # pyupgrade
    "W", # pycodestyle warnings
    ]
ignore = [
    "ANN101", # deprecated annotation rule
    "ANN102", # deprecated annotation rule
    "N818", # exception naming suffix
    "E501", # formatter conflict
    "W191", # formatter conflict
    "ISC001", # formatter conflict
    "RUF012", # lots of false positives for pydantic
    "B008"
    ]
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "S101", # assert used
    "SLF001", # private member tests
    "ANN201", # test function return
    "ANN401", # type Any
    "ARG001", # unused argument for mocker
    "PLR0913", # pytest fixture as arguments
    "FBT001", # boolean fixtures
    "S105", # hardcoded password
    ]

[tool.ruff.lint.isort]
known-first-party = ["app", "pantry_chef"]
case-sensitive = true
combine-as-imports = true

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "single"

[tool.ruff.lint.pycodestyle]
max-line-length = 90

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true
suppress-dummy-args = true


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
